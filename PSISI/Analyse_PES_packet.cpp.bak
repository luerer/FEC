#pragma once

#include "stdafx.h"
#include "string.h"
#include "stdlib.h"    
#include "PES_header.h" 

void Analyse_PES(unsigned char * buffer)
{
	int n = 0,  i = 0;

	FILE *fp_e, *fp;
	fp = fopen("original.ts","rb");
	fseek(fp, 0L ,2);
	long file_size = ftell(fp);
	unsigned char *audio_buf = (unsigned char*)malloc(file_size);
	   
	PES_header header;
	unsigned char *PTS;
	unsigned char *DTS;

	header.packet_start_code_prefix      = buffer[0] | buffer[1] | buffer[2];
	header.stream_id                     = buffer[3];
	header.PES_packet_length             = buffer[4] | buffer[5];
	header.one_zero                      = buffer[6] >> 6 & 0x03;
	header.PES_scrambling_control        = buffer[6] >> 4 & 0x03;
	header.PES_priority                  = buffer[6] >> 3 & 0x01;
	header.data_alignment_indicator      = buffer[6] >> 2 & 0x01;
	header.copyright                     = buffer[6] >> 1 & 0x01;
	header.original_or_copy              = buffer[6] &0x01;
	header.PTS_DTS_flag                  = buffer[7] >> 6 & 0x03;
	header.ESCR_flag                     = buffer[7] >> 5 & 0x01;
	header.ES_rate_flag                  = buffer[7] >> 4 & 0x01;
	header.DSM_trick_mode_flag           = buffer[7] >> 3 & 0x01;
	header.additional_copy_info_flag     = buffer[7] >> 2 & 0x1;
	header.PES_RCR_flag                  = buffer[7] >> 1 & 0x1;
	header.PES_extension_flag            = buffer[7] & 0x01;
	header.PES_header_data_length        = buffer[8];

	n = 9;
	switch (header.PTS_DTS_flag)
	{
        case 0x00:    *PTS = 0x00000000;
			          *DTS = 0x00000000;
					   
					   break;

		case 0x01:    *PTS = (buffer[9] >> 1 & 0x7) | buffer[10] 
			                    | (buffer[11] >> 1 & 0x7F) | buffer[12] 
			                    | (buffer[13] & 0xF7);
					  
					  break;

		case 0x02:    *PTS = (buffer[9] >> 1 & 0x7) | buffer[10] 
			                   | (buffer[11] >> 1 & 0x7F) | buffer[12] 
			                   | (buffer[13] & 0xF7);
					  *DTS = (buffer[14] >> 1 & 0x7) | buffer[15] 
					         | (buffer[16] >> 1 & 0x7F) | buffer[17] 
					         | (buffer[18] & 0xF7);
					  
					  break;

	}
	
	n += header.PES_header_data_length;     //skip and read data from this position

	for(n ; n <= 188 ; n++)
	{
		*audio_buf = buffer[n];
	}

}